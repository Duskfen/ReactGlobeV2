{"version":3,"sources":["components/Globe.js","App.js","reportWebVitals.js","index.js"],"names":["Globe","props","createTranslucentGlobe","canvas","d3","append","attr","width","height","canvasContext","node","getContext","_groups","projection","currentProjection","rotate","precision","fitSize","sphere","path","scale","call","zoom","on","renderWorld","GeoData","initializeSVG","svg","updatePointsOnGlobe","selectAll","point","isPointVisible","renderNewPointOnGlobe","circle","data","animate","r","duration","easing","onfinish","remove","randomIntFromInterval","min","max","Math","floor","random","randomPointSpawning","createRandomPoint","setTimeout","windowResizeEventHandler","globe","document","querySelector","dimensionsPerPropsSpecified","clientWidth","clientHeight","console","log","childNodes","updateProjection","Projection","function","currentProjectionName","name","type","world","context","clearRect","lineWidth","beginPath","this","fillStyle","fill","stroke","strokeStyle","reflectX","graticule","visible","stream","x","y","v0","q0","r0","a0","tl","undefined","_scale","scaleExtent","map","zoomstarted","zoomed","event","that","t","length","atan2","p","versor","cartesian","invert","transform","k","pt","v1","delta","q1","multiply","d","s","sin","c","sign","cos","sqrt","rotation","Object","assign","selection","property","options","id","window","addEventListener","prevProps","Component","App","useState","geoOrthographic","setProjection","className","onChange","e","target","value","geoAiry","geoArmadillo","geoAzimuthalEqualArea","geoBromley","geoCylindricalEqualArea","geoConicEqualArea","geoEqualEarth","geoCraster","geoStereographic","geoNaturalEarth1","changeProjection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1aa69220.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport * as d3 from 'd3'\r\nimport GeoData from \"./geoJson/rough.geo.json\"\r\nimport versor from \"versor\" //versor is used for rotating the globe \r\n\r\n//maybe change to configurable variable if needed\r\nconst animationSpeed = 6000;\r\n\r\n// if you wonder why I render the world in canvas and the datapoints in svg:\r\n// -> It's because of the animations. I don't know how to animate in canvas.. \r\n// -> so I use svg with Element.animate() javascript function which lets me use\r\n//    css animations (-> good performance)\r\n\r\nexport default class Globe extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      this.dimensionsPerPropsSpecified = this.props.width && this.props.height;\r\n\r\n      this.updateProjection = false;\r\n      this.currentProjection = this.props.Projection.function || d3.geoOrthographic()\r\n      if (this.props.Projection) this.currentProjectionName = this.props.Projection.name;\r\n      else this.currentProjectionName = \"Orthographic\";\r\n\r\n      console.log(this.currentProjection)\r\n      console.log(d3.geoOrthographic)\r\n\r\n      this.width = this.props.width;\r\n      this.height = this.props.height;\r\n\r\n      this.sphere = ({ type: \"Sphere\" })\r\n      this.projection = null;\r\n      this.svg = null;\r\n\r\n\r\n   }\r\n\r\n\r\n   createTranslucentGlobe = () => {\r\n      let canvas = d3.select(\"#globe\")\r\n         .append(\"canvas\")\r\n         .attr(\"width\", this.width)\r\n         .attr('height', this.height)\r\n\r\n      let canvasContext = canvas\r\n         .node().getContext(\"2d\");\r\n\r\n      canvas = canvas._groups[0][0]\r\n\r\n      this.projection = this.currentProjection\r\n         .rotate([0,0])\r\n         //.rotate([-10, -50]) //initial rotate to ~ center Austria (on orthographic earth usefull)\r\n         .precision(0.1)\r\n         .fitSize([this.width, this.height], this.sphere)\r\n\r\n      let path = d3.geoPath(this.projection, canvasContext);\r\n\r\n      this.projection.scale(200) //initial zoom\r\n      return d3.select(canvasContext.canvas)\r\n         .call(this.zoom(this.projection)\r\n            .on(\"zoom.render\", () => this.renderWorld(GeoData, canvasContext, path, canvas)) //only a rough map while zooming/rotating (speed reasons)\r\n            .on(\"end.render\", () => this.renderWorld(GeoData, canvasContext, path, canvas))) //could specify a more detailed world\r\n         .call(() => this.renderWorld(GeoData, canvasContext, path, canvas)) //could specify a more detailed world\r\n         .node();\r\n   }\r\n\r\n   initializeSVG = () => {\r\n      //svg is for the globepoints\r\n      this.svg = d3.select(\"#globepoints\").append(\"svg\")\r\n         .attr(\"width\", this.width)\r\n         .attr('height', this.height);\r\n   }\r\n\r\n   renderWorld(world, context, path, canvas) {\r\n      //clear canvas\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      context.lineWidth = 0.3;\r\n      context.beginPath();\r\n      path(this.sphere);\r\n      context.fillStyle = \"#fff\";\r\n      context.fill();\r\n      context.stroke()\r\n      context.strokeStyle = \"#E5E5E5\";\r\n\r\n      if (this.currentProjectionName === \"Orthographic\") {\r\n         //translucent part (by \"fil\" -> https://observablehq.com/@d3/projection-reflectx) \r\n         const r = this.projection.rotate();\r\n         this.projection.reflectX(true).rotate([r[0] + 180, -r[1], -r[2]]);\r\n         context.beginPath();\r\n         path(world);\r\n         context.fillStyle = \"rgba(0,0,0,0.1)\";\r\n         context.fill();\r\n         this.projection.reflectX(false).rotate(r);\r\n      }\r\n\r\n\r\n      var graticule = d3.geoGraticule10()\r\n\r\n      context.beginPath();\r\n      path(graticule);\r\n      context.strokeStyle = \"#ccc\";\r\n      context.stroke();\r\n\r\n      //countries, stroke are the white gaps between them\r\n      context.beginPath();\r\n      path(world);\r\n      context.fillStyle = \"rgba(0,0,0,1)\";\r\n      context.fill();\r\n      context.stroke()\r\n      context.strokeStyle = \"white\";\r\n\r\n      // if you want to render the datapoints via canvas\r\n      // context.beginPath(); //elements are now rendered with svg, to support better animations;\r\n      // path.pointRadius([3])\r\n      // path({type: \"MultiPoint\", coordinates:points});\r\n      // context.fillStyle=\"tomato\"\r\n      // context.fill();\r\n\r\n      this.updatePointsOnGlobe();\r\n   }\r\n\r\n   updatePointsOnGlobe = () => {\r\n\r\n      //select all existing circles and update their coordinates\r\n      //if they are not visible on the earth (on the backside), change their opacity to 0\r\n\r\n      let circles = this.svg.selectAll(\"circle\");\r\n      circles\r\n         .attr(\"cx\", (point) => this.projection(point)[0])\r\n         .attr(\"cy\", (point) => this.projection(point)[1])\r\n         .attr(\"opacity\", (point) => {\r\n            if (this.isPointVisible(this.projection)(point)) return 1\r\n            else return 0;\r\n         });\r\n   }\r\n\r\n   renderNewPointOnGlobe = (point) => {\r\n\r\n      let circle = this.svg.append(\"circle\")\r\n         .data([point])\r\n         .attr(\"class\", \"globepoint\")\r\n         .attr('r', 2)\r\n         .attr(\"cx\", (point) => this.projection(point)[0])\r\n         .attr(\"cy\", (point) => this.projection(point)[1])\r\n         .attr(\"data\", point).node()\r\n\r\n      let anim = circle.animate([\r\n         { r: \"0px\" },\r\n         { r: \"10px\" },\r\n         { r: \"0px\" },\r\n      ], { duration: animationSpeed, easing: \"ease-in-out\" })\r\n\r\n      //Attention, if you wan't to remove points manually (after a specific time, uncomment following line)\r\n      anim.onfinish = () => circle.remove();\r\n   }\r\n\r\n   // -------------------------- temporary (remove if real datapoints are implemented) --------------------------\r\n   //min and max are included\r\n   randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\r\n   createRandomPoint() {\r\n      //longitude -180 to 180\r\n      //latitude 0 to 90\r\n      return [this.randomIntFromInterval(-180, 180), this.randomIntFromInterval(0, 90)]\r\n\r\n   }\r\n   randomPointSpawning = () => {\r\n      this.renderNewPointOnGlobe(this.createRandomPoint());\r\n      setTimeout(this.randomPointSpawning, this.randomIntFromInterval(10, 90))\r\n   }\r\n   // -------------------------- end temporary ------------------------------------------------------------------\r\n\r\n   isPointVisible(projection) {\r\n      let visible;\r\n      const stream = projection.stream({ point() { visible = true; } });\r\n\r\n      //visible is set to false;\r\n      // if a point is outside the stream, don't set visible to true, \r\n      // else set visible to true, return visible\r\n      return ([x, y]) => (visible = false, stream.point(x, y), visible);\r\n   }\r\n\r\n   // zoom by \"Fil\" -> https://observablehq.com/d/1ea380bf05fbf68c@322\r\n   zoom(projection, {\r\n      // Capture the projection’s original scale, before any zooming.\r\n      scale = projection._scale === undefined\r\n         ? (projection._scale = projection.scale())\r\n         : projection._scale,\r\n      scaleExtent = [0.04, 20]\r\n   } = {}) {\r\n      let v0, q0, r0, a0, tl;\r\n\r\n      const zoom = d3.zoom()\r\n         .scaleExtent(scaleExtent.map(x => x * scale))\r\n         .on(\"start\", zoomstarted)\r\n         .on(\"zoom\", zoomed);\r\n\r\n      function point(event, that) {\r\n         const t = d3.pointers(event, that);\r\n\r\n         if (t.length !== tl) {\r\n            tl = t.length;\r\n            if (tl > 1) a0 = Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]);\r\n            zoomstarted.call(that, event);\r\n         }\r\n\r\n         return tl > 1\r\n            ? [\r\n               d3.mean(t, p => p[0]),\r\n               d3.mean(t, p => p[1]),\r\n               Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0])\r\n            ]\r\n            : t[0];\r\n      }\r\n\r\n      function zoomstarted(event) {\r\n         if (!event) return;\r\n         v0 = versor.cartesian(projection.invert(point(event, this)));\r\n         q0 = versor((r0 = projection.rotate()));\r\n      }\r\n\r\n      function zoomed(event) {\r\n         projection.scale(event.transform.k);\r\n         const pt = point(event, this);\r\n         const v1 = versor.cartesian(projection.rotate(r0).invert(pt));\r\n         const delta = versor.delta(v0, v1);\r\n         let q1 = versor.multiply(q0, delta);\r\n\r\n         // For multitouch, compose with a rotation around the axis.\r\n         if (pt[2]) {\r\n            const d = (pt[2] - a0) / 2;\r\n            const s = -Math.sin(d);\r\n            const c = Math.sign(Math.cos(d));\r\n            q1 = versor.multiply([Math.sqrt(1 - s * s), 0, 0, c * s], q1);\r\n         }\r\n\r\n         projection.rotate(versor.rotation(q1));\r\n\r\n         // In vicinity of the antipode (unstable) of q0, restart.\r\n         if (delta[0] < 0.7) zoomstarted.call(this);\r\n      }\r\n\r\n      return Object.assign(selection => selection\r\n         .property(\"__zoom\", d3.zoomIdentity.scale(projection.scale()))\r\n         .call(zoom), {\r\n         on(type, ...options) {\r\n            return options.length\r\n               ? (zoom.on(type, ...options), this)\r\n               : zoom.on(type);\r\n         }\r\n      });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <>\r\n            <div id=\"globe\">\r\n            </div>\r\n            <div id=\"globepoints\">\r\n            </div>\r\n         </>\r\n      )\r\n   }\r\n\r\n   componentDidMount() {\r\n      let globe = document.querySelector(\"#globe\")\r\n\r\n      if (!this.dimensionsPerPropsSpecified) {\r\n         this.width = globe.clientWidth; //set width to globe width (currently 100vw 100vh)\r\n         this.height = globe.clientHeight; //note: the globe width also applies to the globepoints\r\n      }\r\n\r\n      this.initializeSVG();\r\n      this.createTranslucentGlobe();\r\n\r\n      this.randomPointSpawning(); //TODO work with real data and not random points\r\n      //API polling? or Sockets? (sockets are a bit of a overhead i guess but idk..)\r\n\r\n      window.addEventListener(\"resize\", this.windowResizeEventHandler);\r\n   }\r\n\r\n   getSnapshotBeforeUpdate(prevProps){\r\n      if(prevProps.Projection !== this.props.Projection){\r\n         this.updateProjection = true;\r\n      }\r\n      return null;\r\n   }\r\n   componentDidUpdate(){\r\n      if(this.updateProjection){\r\n         this.updateProjection = false;\r\n         this.currentProjection = this.props.Projection.function;\r\n         this.currentProjectionName = this.props.Projection.name;\r\n         document.querySelector(\"#globe canvas\").remove();\r\n         this.createTranslucentGlobe();\r\n      }\r\n   }\r\n\r\n   windowResizeEventHandler = () => {\r\n      //if resized, update the dimensions of the canvas and svg (all points get removed :( ))\r\n      // future: maybe just update the width and height properties so you don't have to rerender and the points doesn't get deleted\r\n      let globe = document.querySelector(\"#globe\")\r\n      let svg = document.querySelector(\"#globepoints svg\")\r\n\r\n      if (!this.dimensionsPerPropsSpecified) {\r\n         this.width = globe.clientWidth;\r\n         this.height = globe.clientHeight;\r\n      }\r\n\r\n      svg.remove()\r\n      console.log(globe)\r\n      globe.childNodes[0].remove(); //remove canvas\r\n      this.createTranslucentGlobe();\r\n      this.initializeSVG();\r\n   }\r\n}\r\n","import './App.css';\nimport Globe from './components/Globe'\nimport { useState } from \"react\";\nimport { geoAzimuthalEqualArea, geoConicEqualArea, geoOrthographic, geoEqualEarth, geoStereographic, geoNaturalEarth1 } from 'd3'\nimport { geoAiry, geoArmadillo, geoBromley, geoCylindricalEqualArea, geoCraster } from \"d3-geo-projection\"\n\n\nfunction App() {\n   const [currentProjection, setProjection] = useState([geoOrthographic(), \"Orthographic\"]);\n\n   const changeProjection = (e) => {\n\n      console.log(\"switchProjection\")\n\n      switch (e.target.value) {\n         case \"Orthographic\":\n            setProjection([geoOrthographic(), e.target.value])\n            break;\n         case \"Airy\":\n            setProjection([geoAiry(), e.target.value])\n            break;\n         case \"Armadillo\":\n            setProjection([geoArmadillo(), e.target.value])\n            break;\n         case \"geoAzimuthalEqualArea\":\n            setProjection([geoAzimuthalEqualArea(), e.target.value])\n            break;\n         case \"geoBromley\":\n            setProjection([geoBromley(), e.target.value])\n            break;\n         case \"geoCylindricalEqualArea\":\n            setProjection([geoCylindricalEqualArea(), e.target.value])\n            break;\n         case \"geoConicEqualArea\":\n            setProjection([geoConicEqualArea(), e.target.value])\n            break;\n         case \"geoEqualEarth\":\n            setProjection([geoEqualEarth(), e.target.value])\n            break;\n         case \"geoCraster\":\n            setProjection([geoCraster(), e.target.value])\n            break;\n         case \"geoStereographic\":\n            setProjection([geoStereographic(), e.target.value])\n            break;\n         case \"geoNaturalEarth1\":\n            setProjection([geoNaturalEarth1(), e.target.value])\n            break;\n         default: console.log(\"default, should not happen\"); break;\n      }\n   }\n\n   return (\n      <div className=\"App\">\n         <header className=\"App-header\">\n            Prototyp For React Globe\n      </header>\n         <main>\n            <div className=\"box\" id=\"projectionChooseWrapper\">\n               <label>choose a projection</label>\n               <select name=\"projectionSelector\" id=\"projectionSelector\" onChange={(e) => changeProjection(e)}>\n                  <option value=\"Orthographic\">Orthographic</option>\n                  <option value=\"Airy\">Airy</option>\n                  {/* <option value=\"Armadillo\">Armadillo</option> */}\n                  <option value=\"geoAzimuthalEqualArea\">geoAzimuthalEqualArea</option>\n                  <option value=\"geoBromley\">geoBromley</option>\n                  <option value=\"geoCylindricalEqualArea\">geoCylindricalEqualArea</option>\n                  <option value=\"geoConicEqualArea\">geoConicEqualArea</option>\n                  <option value=\"geoEqualEarth\">geoEqualEarth</option>\n                  <option value=\"geoCraster\">geoCraster</option>\n                  <option value=\"geoStereographic\">geoStereographic</option>\n                  <option value=\"geoNaturalEarth1\">geoNaturalEarth1</option>\n               </select>\n            </div>\n\n            <Globe Projection={{ function: currentProjection[0], name: currentProjection[1] }}></Globe>\n         </main>\n      </div>\n   );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}