{"version":3,"sources":["components/Globe.js","App.js","reportWebVitals.js","index.js"],"names":["Globe","props","createTranslucentGlobe","canvas","d3","append","attr","width","height","canvasContext","node","getContext","_groups","projection","currentProjection","rotate","precision","fitSize","sphere","path","scale","call","zoom","on","renderWorld","GeoData","initializeSVG","svg","updatePointsOnGlobe","selectAll","point","isPointVisible","renderNewPointOnGlobe","circle","data","animate","r","duration","easing","onfinish","remove","randomIntFromInterval","min","max","Math","floor","random","PointSpawning","help","createPoint","exit","setTimeout","PollMarkersUnAuthenticaated","a","endpoint","URL","fetch","then","res","json","result","availablePoints","error","console","windowResizeEventHandler","globe","document","querySelector","dimensionsPerPropsSpecified","clientWidth","clientHeight","childNodes","updateProjection","Projection","function","currentProjectionName","name","type","currentPoint","world","context","clearRect","lineWidth","beginPath","this","fillStyle","fill","stroke","strokeStyle","reflectX","graticule","length","coords","longitude","latitude","visible","stream","x","y","v0","q0","r0","a0","tl","undefined","_scale","scaleExtent","map","zoomstarted","zoomed","event","that","t","atan2","p","versor","cartesian","invert","transform","k","pt","v1","delta","q1","multiply","d","s","sin","c","sign","cos","sqrt","rotation","Object","assign","selection","property","options","id","window","addEventListener","prevProps","Component","App","useState","geoOrthographic","setProjection","className","onChange","e","log","target","value","geoAiry","geoArmadillo","geoAzimuthalEqualArea","geoBromley","geoCylindricalEqualArea","geoConicEqualArea","geoEqualEarth","geoCraster","geoStereographic","geoNaturalEarth1","changeProjection","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ee6d93be.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from 'd3'\nimport GeoData from \"./geoJson/rough.geo.json\"\nimport versor from \"versor\" //versor is used for rotating the globe \nimport { timeHours } from 'd3';\n\n//maybe change to configurable variable if needed\nconst animationSpeed = 9000;\n\n// if you wonder why I render the world in canvas and the datapoints in svg:\n// -> It's because of the animations. I don't know how to animate in canvas.. \n// -> so I use svg with Element.animate() javascript function which lets me use\n//    css animations (-> good performance)\n\nexport default class Globe extends Component {\n   constructor(props) {\n      super(props);\n\n      this.dimensionsPerPropsSpecified = this.props.width && this.props.height;\n\n      this.updateProjection = false;\n      this.currentProjection = this.props.Projection.function || d3.geoOrthographic()\n      if (this.props.Projection) this.currentProjectionName = this.props.Projection.name;\n      else this.currentProjectionName = \"Orthographic\";\n\n      this.width = this.props.width;\n      this.height = this.props.height;\n\n      this.sphere = ({ type: \"Sphere\" })\n      this.projection = null;\n      this.svg = null;\n\n      this.availablePoints = [];\n      this.currentPoint = 0;\n      this.exit = false; \n\n\n   }\n\n\n   createTranslucentGlobe = () => {\n      let canvas = d3.select(\"#globe\")\n         .append(\"canvas\")\n         .attr(\"width\", this.width)\n         .attr('height', this.height)\n\n      let canvasContext = canvas\n         .node().getContext(\"2d\");\n\n      canvas = canvas._groups[0][0]\n\n      this.projection = this.currentProjection\n         .rotate([0,0])\n         //.rotate([-10, -50]) //initial rotate to ~ center Austria (on orthographic earth usefull)\n         .precision(0.1)\n         .fitSize([this.width, this.height], this.sphere)\n\n      let path = d3.geoPath(this.projection, canvasContext);\n\n      this.projection.scale(200) //initial zoom\n      return d3.select(canvasContext.canvas)\n         .call(this.zoom(this.projection)\n            .on(\"zoom.render\", () => this.renderWorld(GeoData, canvasContext, path, canvas)) //only a rough map while zooming/rotating (speed reasons)\n            .on(\"end.render\", () => this.renderWorld(GeoData, canvasContext, path, canvas))) //could specify a more detailed world\n         .call(() => this.renderWorld(GeoData, canvasContext, path, canvas)) //could specify a more detailed world\n         .node();\n   }\n\n   initializeSVG = () => {\n      //svg is for the globepoints\n      this.svg = d3.select(\"#globepoints\").append(\"svg\")\n         .attr(\"width\", this.width)\n         .attr('height', this.height);\n   }\n\n   renderWorld(world, context, path, canvas) {\n      //clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.lineWidth = 0.3;\n      context.beginPath();\n      path(this.sphere);\n      context.fillStyle = \"#fff\";\n      context.fill();\n      context.stroke()\n      context.strokeStyle = \"#042940\";\n\n      if (this.currentProjectionName === \"Orthographic\") {\n         //translucent part (by \"fil\" -> https://observablehq.com/@d3/projection-reflectx) \n         const r = this.projection.rotate();\n         this.projection.reflectX(true).rotate([r[0] + 180, -r[1], -r[2]]);\n         context.beginPath();\n         path(world);\n         context.fillStyle = \"rgba(4, 41, 64,0.1)\";\n         context.fill();\n         this.projection.reflectX(false).rotate(r);\n      }\n\n\n      var graticule = d3.geoGraticule10()\n\n      context.beginPath();\n      path(graticule);\n      context.strokeStyle = \"black\";\n      context.stroke();\n\n      //countries, stroke are the white gaps between them\n      context.fillStyle = \"rgba(4, 41, 64,1)\";\n      context.beginPath();\n      path(world);\n      context.fill();\n      context.stroke()\n\n      // if you want to render the datapoints via canvas\n      // context.beginPath(); //elements are now rendered with svg, to support better animations;\n      // path.pointRadius([3])\n      // path({type: \"MultiPoint\", coordinates:points});\n      // context.fillStyle=\"tomato\"\n      // context.fill();\n\n      this.updatePointsOnGlobe();\n   }\n\n   updatePointsOnGlobe = () => {\n\n      //select all existing circles and update their coordinates\n      //if they are not visible on the earth (on the backside), change their opacity to 0\n\n      let circles = this.svg.selectAll(\"circle\");\n      circles\n         .attr(\"cx\", (point) => this.projection(point)[0])\n         .attr(\"cy\", (point) => this.projection(point)[1])\n         .attr(\"opacity\", (point) => {\n            if (this.isPointVisible(this.projection)(point)) return 1\n            else return 0;\n         });\n   }\n\n   renderNewPointOnGlobe = (point) => {\n\n      let circle = this.svg.append(\"circle\")\n         .data([point])\n         .attr(\"class\", \"globepoint\")\n         .attr('r', 2)\n         .attr(\"cx\", (point) => this.projection(point)[0])\n         .attr(\"cy\", (point) => this.projection(point)[1])\n         .attr(\"data\", point).node()\n\n      let anim = circle.animate([\n         { r: \"0px\" },\n         { r: \"5px\" },\n         { r: \"0px\" },\n      ], { duration: animationSpeed, easing: \"ease-in-out\" })\n\n      //Attention, if you wan't to remove points manually (after a specific time, uncomment following line)\n      anim.onfinish = () => circle.remove();\n   }\n\n   // -------------------------- temporary (remove if real datapoints are implemented) --------------------------\n   //min and max are included\n   randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n   createPoint() {\n      //longitude -180 to 180\n      //latitude 0 to 90\n\n      let availablePoints = this.availablePoints;\n      if(availablePoints.length === 0) return null;\n      this.currentPoint++;\n      return [availablePoints[this.currentPoint%availablePoints.length].coords.longitude, availablePoints[this.currentPoint%availablePoints.length].coords.latitude];\n\n   }\n   PointSpawning = () => {\n      let help = this.createPoint()\n      if(help != null) this.renderNewPointOnGlobe(help);\n      if(!this.exit) setTimeout(this.PointSpawning, this.randomIntFromInterval(10, 90))\n   }\n\n   PollMarkersUnAuthenticaated = async () => {\n      let endpoint = new URL(\"https://testifyheatmap.azurewebsites.net/api/GetLatestCoordinatesUnAuthenticated?&timeSpan=10080\");\n  \n      await fetch(endpoint)\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.availablePoints = result;\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n\n        //if(!this.exit) setTimeout(async () => await this.PollMarkersUnAuthenticaated(), 1000000) //if you want to update points\n    }\n\n   isPointVisible(projection) {\n      let visible;\n      const stream = projection.stream({ point() { visible = true; } });\n\n      //visible is set to false;\n      // if a point is outside the stream, don't set visible to true, \n      // else set visible to true, return visible\n      return ([x, y]) => (visible = false, stream.point(x, y), visible);\n   }\n\n   // zoom by \"Fil\" -> https://observablehq.com/d/1ea380bf05fbf68c@322\n   zoom(projection, {\n      // Capture the projection’s original scale, before any zooming.\n      scale = projection._scale === undefined\n         ? (projection._scale = projection.scale())\n         : projection._scale,\n      scaleExtent = [0.04, 20]\n   } = {}) {\n      let v0, q0, r0, a0, tl;\n\n      const zoom = d3.zoom()\n         .scaleExtent(scaleExtent.map(x => x * scale))\n         .on(\"start\", zoomstarted)\n         .on(\"zoom\", zoomed);\n\n      function point(event, that) {\n         const t = d3.pointers(event, that);\n\n         if (t.length !== tl) {\n            tl = t.length;\n            if (tl > 1) a0 = Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0]);\n            zoomstarted.call(that, event);\n         }\n\n         return tl > 1\n            ? [\n               d3.mean(t, p => p[0]),\n               d3.mean(t, p => p[1]),\n               Math.atan2(t[1][1] - t[0][1], t[1][0] - t[0][0])\n            ]\n            : t[0];\n      }\n\n      function zoomstarted(event) {\n         if (!event) return;\n         v0 = versor.cartesian(projection.invert(point(event, this)));\n         q0 = versor((r0 = projection.rotate()));\n      }\n\n      function zoomed(event) {\n         projection.scale(event.transform.k);\n         const pt = point(event, this);\n         const v1 = versor.cartesian(projection.rotate(r0).invert(pt));\n         const delta = versor.delta(v0, v1);\n         let q1 = versor.multiply(q0, delta);\n\n         // For multitouch, compose with a rotation around the axis.\n         if (pt[2]) {\n            const d = (pt[2] - a0) / 2;\n            const s = -Math.sin(d);\n            const c = Math.sign(Math.cos(d));\n            q1 = versor.multiply([Math.sqrt(1 - s * s), 0, 0, c * s], q1);\n         }\n\n         projection.rotate(versor.rotation(q1));\n\n         // In vicinity of the antipode (unstable) of q0, restart.\n         if (delta[0] < 0.7) zoomstarted.call(this);\n      }\n\n      return Object.assign(selection => selection\n         .property(\"__zoom\", d3.zoomIdentity.scale(projection.scale()))\n         .call(zoom), {\n         on(type, ...options) {\n            return options.length\n               ? (zoom.on(type, ...options), this)\n               : zoom.on(type);\n         }\n      });\n   }\n\n   render() {\n      return (\n         <>\n            <div id=\"globe\">\n            </div>\n            <div id=\"globepoints\">\n            </div>\n         </>\n      )\n   }\n\n   componentDidMount() {\n      let globe = document.querySelector(\"#globe\")\n\n      if (!this.dimensionsPerPropsSpecified) {\n         this.width = globe.clientWidth; //set width to globe width (currently 100vw 100vh)\n         this.height = globe.clientHeight; //note: the globe width also applies to the globepoints\n      }\n\n      this.initializeSVG();\n      this.createTranslucentGlobe();\n\n      this.PollMarkersUnAuthenticaated().then(this.PointSpawning());\n\n      window.addEventListener(\"resize\", this.windowResizeEventHandler);\n   }\n\n   getSnapshotBeforeUpdate(prevProps){\n      if(prevProps.Projection !== this.props.Projection){\n         this.updateProjection = true;\n      }\n      return null;\n   }\n   componentDidUpdate(){\n      if(this.updateProjection){\n         this.updateProjection = false;\n         this.currentProjection = this.props.Projection.function;\n         this.currentProjectionName = this.props.Projection.name;\n         document.querySelector(\"#globe canvas\").remove();\n         this.createTranslucentGlobe();\n      }\n   }\n\n   componentWillUnmount(){\n      this.exit = true; //to handle infinite setTimeout intervalls\n   }\n\n   windowResizeEventHandler = () => {\n      //if resized, update the dimensions of the canvas and svg (all points get removed :( ))\n      // future: maybe just update the width and height properties so you don't have to rerender and the points doesn't get deleted\n      let globe = document.querySelector(\"#globe\")\n      let svg = document.querySelector(\"#globepoints svg\")\n\n      if (!this.dimensionsPerPropsSpecified) {\n         this.width = globe.clientWidth;\n         this.height = globe.clientHeight;\n      }\n\n      svg.remove()\n      globe.childNodes[0].remove(); //remove canvas\n      this.createTranslucentGlobe();\n      this.initializeSVG();\n   }\n}\n","import './App.css';\nimport Globe from './components/Globe'\nimport { useState } from \"react\";\nimport { geoAzimuthalEqualArea, geoConicEqualArea, geoOrthographic, geoEqualEarth, geoStereographic, geoNaturalEarth1 } from 'd3'\nimport { geoAiry, geoArmadillo, geoBromley, geoCylindricalEqualArea, geoCraster } from \"d3-geo-projection\"\n\n\nfunction App() {\n   const [currentProjection, setProjection] = useState([geoOrthographic(), \"Orthographic\"]);\n\n   const changeProjection = (e) => {\n\n      console.log(\"switchProjection\")\n\n      switch (e.target.value) {\n         case \"Orthographic\":\n            setProjection([geoOrthographic(), e.target.value])\n            break;\n         case \"Airy\":\n            setProjection([geoAiry(), e.target.value])\n            break;\n         case \"Armadillo\":\n            setProjection([geoArmadillo(), e.target.value])\n            break;\n         case \"geoAzimuthalEqualArea\":\n            setProjection([geoAzimuthalEqualArea(), e.target.value])\n            break;\n         case \"geoBromley\":\n            setProjection([geoBromley(), e.target.value])\n            break;\n         case \"geoCylindricalEqualArea\":\n            setProjection([geoCylindricalEqualArea(), e.target.value])\n            break;\n         case \"geoConicEqualArea\":\n            setProjection([geoConicEqualArea(), e.target.value])\n            break;\n         case \"geoEqualEarth\":\n            setProjection([geoEqualEarth(), e.target.value])\n            break;\n         case \"geoCraster\":\n            setProjection([geoCraster(), e.target.value])\n            break;\n         case \"geoStereographic\":\n            setProjection([geoStereographic(), e.target.value])\n            break;\n         case \"geoNaturalEarth1\":\n            setProjection([geoNaturalEarth1(), e.target.value])\n            break;\n         default: console.log(\"default, should not happen\"); break;\n      }\n   }\n\n   return (\n      <div className=\"App\">\n         <header className=\"App-header\">\n            Prototyp For React Globe\n      </header>\n         <main>\n            <div className=\"box\" id=\"projectionChooseWrapper\">\n               <label>choose a projection</label>\n               <select name=\"projectionSelector\" id=\"projectionSelector\" onChange={(e) => changeProjection(e)}>\n                  <option value=\"Orthographic\">Orthographic</option>\n                  <option value=\"Airy\">Airy</option>\n                  {/* <option value=\"Armadillo\">Armadillo</option> */}\n                  <option value=\"geoAzimuthalEqualArea\">geoAzimuthalEqualArea</option>\n                  <option value=\"geoBromley\">geoBromley</option>\n                  <option value=\"geoCylindricalEqualArea\">geoCylindricalEqualArea</option>\n                  <option value=\"geoConicEqualArea\">geoConicEqualArea</option>\n                  <option value=\"geoEqualEarth\">geoEqualEarth</option>\n                  <option value=\"geoCraster\">geoCraster</option>\n                  <option value=\"geoStereographic\">geoStereographic</option>\n                  <option value=\"geoNaturalEarth1\">geoNaturalEarth1</option>\n               </select>\n            </div>\n\n            <Globe Projection={{ function: currentProjection[0], name: currentProjection[1] }}></Globe>\n         </main>\n      </div>\n   );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}